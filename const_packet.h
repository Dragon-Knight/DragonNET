#pragma once

/*
	Пакет данных (L2):
		[0], 0x5B - Стартовый байт;
		[1], 0xXX - Тип пакета;
		[2], 0xXX - Длина данных пакета;
			[3.], 0xXX - Данные;
		[], 0x5D - Стоповый байт;
	
	Пакет данных c вложенным пакетом (L3):
		[0], 0x5B - Стартовый байт;
		[1], 0xXX - Тип пакета;
		[2], 0xXX - Длина данных пакета;
			[3], 0xXX - ID устройства;
			[4], 0xXX - Тип устройства;
			[5], 0xXX - Тип данных;
			[6], 0xXX - Длина данных;
			[7.], 0xXX - Данные;
		[], 0x5D - Стоповый байт;
	
	
	// Запрос токена клиента:
		[5B][01][00][5D]
		
	// Передача токена клиента.
		[5B][41][10][16_БАЙТ_ТОКЕНА][5D]
		
	// Результат авторизации клиента.
		[5B][02][01][XX][5D]
			XX - Код результата, где 0x00 - успешная авторизация.
		
	// Пакет данных для конкретного виртуального устройства.
		[5B][10][XX][[AA][BB][CC][DD][ДАННЫЕ]][5D]
			XX - Длина блока данных первого уровня.
			AA - ID устройства.
			BB - Тип устройства.
			CC - Тип данных.
			DD - Длина блока данных второго уровня.
		
	// Пакет данных для конкретного виртуального прокси.
		[5B][20][XX][[16_БАЙТ_ТОКЕНА_ПОЛУЧАТЕЛЯ][ДАННЫЕ]][5D]
			XX - Длина блока данных первого уровня.
		
	
	// Пакет данных от конкретного виртуального устройства.
		[5B][51][XX][[AA][BB][CC][DD][ДАННЫЕ]][5D]
			XX - Длина блока данных первого уровня.
			AA - ID устройства.
			BB - Тип устройства.
			CC - Тип данных.
			DD - Длина блока данных второго уровня.
		
	// Пакет данных от конкретного виртуального прокси.
		[5B][61][XX][[16_БАЙТ_ТОКЕНА_ОТПРАВИТЕЛЯ][ДАННЫЕ]][5D]
			XX - Длина блока данных первого уровня.
		
	
*/

namespace DragonNETns
{
	namespace PacketConst
	{
		constexpr byte PACKET_START =	0x5B;	// Первый байт пакета.
		constexpr byte PACKET_END =		0x5D;	// Последний байт пакета.
		enum packet_type_t : byte
		{
			// Пакеты, отправленные от сервера на устройство.
			PACKET_TYPE_AUTH_REQ =		0x01,	// Запрос токена клиента.
			PACKET_TYPE_AUTH_RES =		0x02,	// Результат авторизации клиента.
			PACKET_TYPE_FOR_DEVICE =	0x10,	// Пакет данных для конкретного виртуального устройства.
			PACKET_TYPE_FOR_PROXY =		0x20,	// Пакет данных для конкретного виртуального прокси.
			
			// Пакеты, отправленные от устройства на сервер.
			PACKET_TYPE_AUTH_TOKEN =	0x41,	// Передача токена клиента.
			PACKET_TYPE_FROM_DEVICE =	0x51,	// Пакет данных от конкретного виртуального устройства.
			PACKET_TYPE_FROM_PROXY =	0x61	// Пакет данных от конкретного виртуального прокси.
		};

		constexpr uint8_t TOKEN_LENGTH = 16;	// Длина токена.
	}
}
